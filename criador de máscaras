import json
import numpy as np
from PIL import Image, ImageDraw
import matplotlib.pyplot as plt
import cv2

# Caminho para o arquivo JSON
json_path = r"json aqui"

# Caminho para a imagem original
image_path = r"imagem original aqui"
# Carregar e imprimir o conteúdo do JSON
try:
    with open(json_path, 'r') as f:
        data = json.load(f)
except Exception as e:
    print(f"Erro ao carregar o JSON: {e}")

# Carregar a imagem original para obter suas dimensões
try:
    image = Image.open(image_path)
    width, height = image.size
except Exception as e:
    print(f"Erro ao carregar a imagem: {e}")

# Criar uma imagem em branco para a máscara
mask = Image.new('L', (width, height), 0)

# Ajustar a estrutura conforme o conteúdo do JSON
try:
    # Extrair os dados da chave '_via_img_metadata'
    img_metadata = data.get('_via_img_metadata', {})
    for img_info in img_metadata.values():
        for region in img_info.get('regions', []):
            shape_attributes = region.get('shape_attributes', {})
            if shape_attributes.get('name') == 'polyline':
                points_x = shape_attributes.get('all_points_x', [])
                points_y = shape_attributes.get('all_points_y', [])
                points = list(zip(points_x, points_y))
                # Criar um objeto ImageDraw para desenhar na máscara
                draw = ImageDraw.Draw(mask)
                # Desenhar e preencher a polyline na máscara
                draw.polygon(points, outline=255, fill=255)
except Exception as e:
    print(f"Erro ao processar a máscara: {e}")

# Converter a máscara para um array numpy
mask_array = np.array(mask)

# Aplicar um threshold para binarizar a máscara (se necessário)
_, binary_mask = cv2.threshold(mask_array, 128, 255, cv2.THRESH_BINARY)

# Encontrar os contornos na máscara binária
contours, _ = cv2.findContours(binary_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Criar uma nova máscara para preenchimento
filled_mask = np.zeros_like(binary_mask)

# Preencher as áreas internas dos contornos
for contour in contours:
    cv2.drawContours(filled_mask, [contour], -1, 255, thickness=cv2.FILLED)

# Converter a máscara preenchida para uma imagem PIL
filled_mask_image = Image.fromarray(filled_mask)

# Converter a imagem original para um array numpy
image_array = np.array(image)

# Exibir a imagem original e a máscara preenchida
fig, axs = plt.subplots(1, 2, figsize=(12, 6))

axs[0].imshow(image_array)
axs[0].set_title("Imagem Original")
axs[0].axis('off')  # Esconder os eixos

axs[1].imshow(filled_mask, cmap='gray')
axs[1].set_title("Máscara Preenchida")
axs[1].axis('off')  # Esconder os eixos

plt.show()

# Salvar a nova máscara preenchida, se necessário
filled_mask_image.save(r'onde salvar a nova mascara e o nome dela')
