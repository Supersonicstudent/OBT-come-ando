import cv2
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import os

# Função para ler e verificar a imagem
def load_image(image_path):
    if not os.path.exists(image_path):
        raise FileNotFoundError(f"File does not exist at {image_path}")
    
    image = cv2.imread(image_path)
    if image is None:
        raise FileNotFoundError(f"Image not found at {image_path}")
    
    print(f"Image loaded successfully from {image_path}")
    return image

# Função para segmentar a imagem usando KMeans
def segment_image(image, k=2):
    print("Starting image segmentation...")
    pixel_values = image.reshape((-1, 3))
    pixel_values = np.float32(pixel_values)
    
    kmeans = KMeans(n_clusters=k, random_state=0)
    labels = kmeans.fit_predict(pixel_values)
    segmented_image = kmeans.cluster_centers_[labels]
    segmented_image = segmented_image.reshape(image.shape)
    segmented_image = np.uint8(segmented_image)
    
    print("Image segmentation completed.")
    return segmented_image

# Caminho da imagem
image_path = "c:\\Users\\João Vitor\\Pictures\\Roblox\\Saved Pictures\\maparua1.jpg"

# Carrega a imagem
try:
    image = load_image(image_path)
except FileNotFoundError as e:
    print(e)
    sys.exit(1)

# Segmenta a imagem
segmented_image = segment_image(image, k=2)

# Salva e exibe a imagem segmentada
output_path = "c:\\Users\\João Vitor\\Pictures\\Roblox\\Saved Pictures\\segmented_image.jpg"
cv2.imwrite(output_path, segmented_image)
print(f"Segmented image saved at {output_path}")

plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')

plt.subplot(1, 2, 2)
plt.imshow(cv2.cvtColor(segmented_image, cv2.COLOR_BGR2RGB))
plt.title('Segmented Image')

plt.show()
